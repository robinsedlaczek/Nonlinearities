using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using StdMath = System.Math;

namespace Nonlinearities.Analysis
{
    /// <summary>
    /// This class represents a nonlinearity which gives an estimate of the firing rate of a neuron. Therefore,
    /// it uses Bayes rule (Schwartz et. al: "Spike-triggered neural characterization").
    /// </summary>
    public class Nonlinearity
    {
        #region Private Fields

        private NormalDistribution _frequencyOfRawStimuli;
        private NormalDistribution _frequencyOfSpikeTriggeredStimuli;
        private int _points;
        private bool _parameterChanged;
        private double[,] _firingRateCurce;

        #endregion
        
        #region Construction

        public Nonlinearity(NormalDistribution frequencyOfRawStimuli, NormalDistribution frequencyOfSpikeTriggeredStimuli, int points)
        {
            _frequencyOfRawStimuli = frequencyOfRawStimuli;
            _frequencyOfSpikeTriggeredStimuli = frequencyOfSpikeTriggeredStimuli;
            _points = points;

            _parameterChanged = true;
        }

        #endregion

        #region Public Members

        public int Points
        {
            get
            {
                return _points;
            }

            set
            {
                if (_points != value)
                {
                    _points = value;
                    _parameterChanged = true;
                }
            }
        }

        public double[,] FiringRateCurve
        {
            get
            {
                if (_parameterChanged)
                {
                    _firingRateCurce = CalculateFiringRateCurve();
                    _parameterChanged = false;
                }

                return _firingRateCurce;
            }
        }

        #endregion

        #region Private Members

        /// <summary>
        /// This method estimates the firing rate generated by this nonlinearity. Therefore, Bayes rule is used. The frequency 
        /// of spike-triggered stimuli is divided by the frequency of raw stimuli. 
        /// </summary>
        /// <returns>
        /// Returns an 2-dimensional array which contains the estimated curve. The first dimension represents the x-coordinate, 
        /// the second dimension represents the y-coordinate.
        /// </returns>
        private double[,] CalculateFiringRateCurve()
        {
            // [RS] Find maximum definition space of both frequencies and take for definition space of X.
            var lowerBound = StdMath.Min(_frequencyOfSpikeTriggeredStimuli.LowerBound, _frequencyOfRawStimuli.LowerBound);
            var upperBound = StdMath.Max(_frequencyOfSpikeTriggeredStimuli.UpperBound, _frequencyOfRawStimuli.UpperBound);

            var result = new double[Points, 2];
            var stepWidth = (upperBound - lowerBound) / Points;

            for (var index = 0; index < Points; index++)
            {
                var x = lowerBound + index * stepWidth;
                
                var pSpikeTriggeredStimuli = (1d / StdMath.Sqrt(2d * StdMath.PI * _frequencyOfSpikeTriggeredStimuli.Variance)) *
                                             StdMath.Exp((-StdMath.Pow(x - _frequencyOfSpikeTriggeredStimuli.Mean, 2)) / (2 * _frequencyOfSpikeTriggeredStimuli.Variance));

                var pRawStimuli = (1d / StdMath.Sqrt(2d * StdMath.PI * _frequencyOfRawStimuli.Variance)) *
                                  StdMath.Exp((-StdMath.Pow(x - _frequencyOfRawStimuli.Mean, 2)) / (2 * _frequencyOfRawStimuli.Variance));

                var nonlinearity = pSpikeTriggeredStimuli / pRawStimuli;

                result[index, 0] = x;
                result[index, 1] = nonlinearity;
            }

            return result;
        }

        #endregion
    }
}
